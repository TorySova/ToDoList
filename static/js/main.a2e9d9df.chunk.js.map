{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/auth-reducer.ts","state/tasksReducer.ts","state/todoListReducer.ts","state/store.ts","common/ErrorSnackbar.tsx","common/AddItemForm.tsx","common/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","components/TodolistList.tsx","features/Login.tsx","components/Error404.tsx","app/App.tsx","index.tsx","components/Error.module.css","common/tenor.gif"],"names":["Boolean","window","location","hostname","match","TaskPriorities","TaskStatuses","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","delete","title","post","put","taskId","model","authAPI","data","initialState","status","error","isInitialized","setAppStatusAC","type","setAppErrorAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","isLoggedIn","setIsLoggedInAC","value","rootReducer","combineReducers","tasks","state","action","copyState","todoList","todoListID","filter","t","id","stateCopy","task","todoListId","newTasks","todoListTasks","map","todolist","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunk","Alert","props","elevation","variant","ErrorSnackbar","useDispatch","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","console","log","useState","setTitle","setError","addTask","trim","addItem","TextField","color","onChange","e","currentTarget","onKeyPress","key","helperText","label","size","IconButton","onClick","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","changeTaskTitle","className","Checkbox","removeTask","Delete","TodoList","demo","useEffect","then","res","setTasksAC","items","changeTodoListTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","removeTodoList","disabled","Button","TodolistList","todoLists","isLoggetIn","ChangeTodoListFilterAC","removeTaskAC","removeTaskTC","addTack","resultCode","item","addTaskAC","catch","addTaskTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","updateTaskStatusTC","addTodoList","AddTodoListTC","RemoveTodoListAC","changeTaskitle","changeTaskTitleAC","newTitle","ChangeToodoListTitleAC","ChangeToodoListTitleTC","Grid","container","style","padding","spacing","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","Error404","s","text","gif","src","tenor","alt","App","history","useHistory","AppBar","position","Toolbar","Typography","push","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a2e9d9df.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '67477460-bd4f-44a1-875d-97f09390d59f'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    getTodo() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title})\r\n    },\r\n    updateTodo(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, { title })\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks`, { title })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`,  model )\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>('/auth/login')\r\n    }\r\n }\r\n ","import { Dispatch } from 'redux';\r\nimport { setIsLoggedInAC } from './../features/auth-reducer';\r\nimport { authAPI } from './../api/todolist-api';\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case \"APP/SET-ERROR\":\r\n            return { ...state, error: action.error }\r\n        case \"APP/SET-INITIALIZED\":\r\n            return { ...state, isInitialized: action.isInitialized }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({\r\n    type: 'APP/SET-ERROR',\r\n    error\r\n} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({ type: 'APP/SET-INITIALIZED', isInitialized } as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        debugger\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\ntype ActionsType = SetAppStatusActionType | setAppErrorActionType | SetAppInitializedActionType","import { ResponseType } from './../api/todolist-api';\r\nimport { setAppErrorAC, setAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n   if (data.messages.length) {\r\n       dispatch(setAppErrorAC(data.messages[0]))\r\n   } else {\r\n       dispatch(setAppErrorAC('Some error occurred'))\r\n   }\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(setAppErrorAC(error.message))\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorActionType | SetAppStatusActionType>","import { handleServerAppError, handleServerNetworkError } from './../utils/error-utils';\r\nimport { authAPI } from './../api/todolist-api';\r\nimport { SetAppStatusActionType, setAppErrorActionType, setAppStatusAC } from './../app/app-reducer';\r\nimport { Dispatch } from 'redux'\r\n\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'login/SET-IS-LOGGED-IN':\r\n           return {...state, isLoggedIn: action.value}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n   ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.login(data)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.logout()\r\n       .then(res => {\r\n           if (res.data.resultCode === 0) {\r\n               dispatch(setIsLoggedInAC(false))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n           } else {\r\n               handleServerAppError(res.data, dispatch)\r\n           }\r\n       })\r\n       .catch((error) => {\r\n           handleServerNetworkError(error, dispatch)\r\n       })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | setAppErrorActionType","import { handleServerAppError, handleServerNetworkError } from './../utils/error-utils';\r\nimport { setAppStatusAC, setAppErrorAC } from '../app/app-reducer';\r\nimport { AppRootStateType } from './store';\r\nimport { TaskStatuses, TaskType, todolistAPI } from './../api/todolist-api';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todoListReducer';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionType = RemoveTaskActionType |\r\n    AddTaskActionType | ChangeTaskStatusType |\r\n    ChangeTaskTitleType | AddTodolistActionType |\r\n    RemoveTodolistActionType | SetTodolistsActionType | SetTasksActionType\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todoListID: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\nexport type ChangeTaskStatusType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n }\r\n \r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    let todoList;\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = { ...state };\r\n            let todoList = copyState[action.todoListID];\r\n            copyState[action.todoListID] = todoList.filter(t => t.id !== action.taskId);\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let stateCopy = { ...state }\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todoListTasks = state[action.todoListID];\r\n            state[action.todoListID] = todoListTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? { ...t, status: action.status }\r\n                    : t);\r\n            return ({ ...state })\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todoListTasks = state[action.todoListID];\r\n            state[action.todoListID] = todoListTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? { ...t, title: action.title }\r\n                    : t);\r\n            return ({ ...state })\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return { ...state, [action.todolist.id]: [] }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = { ...state };\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n         }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n         }\r\n         \r\n         \r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListID: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todoListID }\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', task }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListID: string): ChangeTaskStatusType => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, status, todoListID }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListID: string): ChangeTaskTitleType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, title, todoListID }\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n }\r\n \r\n\r\n export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n }\r\n \r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n }\r\n export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n        // те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n            \r\n            .then(() => {\r\n                const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n        }\r\n    }\r\n}\r\n \r\n\r\n\r\n","import { setAppStatusAC, RequestStatusType, setAppErrorAC } from '../app/app-reducer';\r\nimport { TodolistType, todolistAPI } from './../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => t.id === action.id ? { ...t, title: action.title } : t)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => t.id === action.id ? { ...t, filter: action.filter } : t)\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        }\r\n        case 'CHANGE-TODOLIST-ENTITI-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = RemoveTodolistActionType |\r\n    AddTodolistActionType |\r\n    ReturnType<typeof ChangeToodoListTitleAC> |\r\n    ReturnType<typeof ChangeTodoListFilterAC> |\r\n    ReturnType<typeof ChangeTodoListFilterAC> |\r\n    SetTodolistsActionType |\r\n    ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodoListAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodoListAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport const RemoveTodoListAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\n\r\nexport const AddTodoListAC = (todolist: TodolistType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n} as const)\r\nexport const ChangeToodoListTitleAC = (todoListID: string, newTitle: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: todoListID,\r\n    title: newTitle\r\n} as const)\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, todoListID: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: todoListID,\r\n    filter: filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType,) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITI-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\nexport const fetchTodolistsThunkTS = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTodo()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const RemoveTodoListTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistAPI.deleteTodo(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(RemoveTodoListAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const AddTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.createTodo(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(AddTodoListAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const ChangeToodoListTitleTC = (todoListID: string, newTitle: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTodo(todoListID, newTitle)\r\n            .then((res) => {\r\n                dispatch(ChangeToodoListTitleAC(todoListID, newTitle))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n","import { authReducer } from './../features/auth-reducer';\r\nimport { appReducer } from '../app/app-reducer';\r\nimport {tasksReducer} from './tasksReducer';\r\nimport {todoListReducer} from './todoListReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todoListReducer,\r\n   app: appReducer,\r\n   auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../state/store'\r\nimport { setAppErrorAC } from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch =  useDispatch()\r\n\r\n   const error = useSelector<AppRootStateType, string|null>((state) => state.app.error)\r\n\r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n       if (reason === 'clickaway') {\r\n           return\r\n       }\r\n       dispatch(setAppErrorAC(null))\r\n       \r\n   }\r\n\r\n   return (\r\n       <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n           <Alert onClose={handleClose} severity=\"error\">\r\n               {error}\r\n           </Alert>\r\n       </Snackbar>\r\n\r\n   )\r\n}\r\n","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport {TextField, IconButton} from '@material-ui/core';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\n\r\ntype AddItemFormPropsType = {\r\n\taddItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\tconsole.log('AddItemForm is called')\r\n\tlet [title, setTitle] = useState<string>(\"\");\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t};\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif(error !== null){\r\n\t\t\tsetError(null)\r\n\t\t}\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\taddTask();\r\n\t\t}\r\n\t};\r\n\r\n\tconst addTask = () => {\r\n\t\tif (title.trim() !== \"\") {\r\n\t\t\tprops.addItem(title.trim());\r\n\t\t\tsetTitle(\"\")\r\n\t\t} else {\r\n\t\t\tsetError(\"error\")\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\tcolor=\"primary\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tvalue={title}\r\n\t\t\t\tonChange={onChangeHandler}\r\n\t\t\t\tonKeyPress={onKeyPressHandler}\r\n\t\t\t\terror={!!error}\r\n\t\t\t\thelperText={error}\r\n\t\t\t\tlabel=\"Please enter text\"\r\n\t\t\t\tsize=\"small\"\r\n\t\t\t/>\r\n\t\t\t<IconButton color=\"inherit\" size=\"medium\" onClick={addTask}>\r\n\t\t\t\t<PostAddIcon/>\r\n\t\t\t</IconButton>\r\n\t\t</div>\r\n\t)\r\n});\r\n\r\nexport default AddItemForm;\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n\tvalue: string\r\n\tchangeValue: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\tconsole.log('wdefr')\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [title, setTitle] = useState(props.value)\r\n\r\n\tconst onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst activatedEditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t}\r\n\r\n\tconst deActivatedEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tif(title){\r\n\t\t\tprops.changeValue(title)\r\n\t\t}\r\n\t}\r\n\r\n\treturn editMode\r\n\t\t? <TextField variant=\"standard\" value={title} onBlur={deActivatedEditMode} autoFocus={true} onChange={onChangeTitle} />\r\n\t\t: <span onDoubleClick={activatedEditMode}> {props.value} </span>\r\n});\r\n\r\nexport default EditableSpan;\r\n","import { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useCallback } from 'react';\r\nimport { TaskStatuses, TaskType } from '../api/todolist-api';\r\nimport EditableSpan from '../common/EditableSpan';\r\n\r\ntype TaskPropsType = {\r\n\tremoveTask: (taskId: string, todoListID: string) => void\r\n\tchangeTaskStatus: (id: string, status: TaskStatuses, todoListID: string) => void\r\n\tchangeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n\ttask: TaskType\r\n\ttodoListId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\tconst removeTask = () => { props.removeTask(props.task.id, props.todoListId) }\r\n\tconst onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n\t}, [props.task.id, props.todoListId]);\r\n\t\r\n\tconst changeTaskTitle = useCallback((title: string) => {\r\n\t\tprops.changeTaskTitle(props.task.id, title, props.todoListId)\r\n\t}, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\treturn (\r\n\t\t<div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\t\t\t<Checkbox color=\"primary\" checked={props.task.status === TaskStatuses.Completed} onChange={onChangeHandler} />\r\n\t\t\t<EditableSpan value={props.task.title} changeValue={changeTaskTitle} />\r\n\t\t\t<IconButton onClick={removeTask} size=\"small\">\r\n\t\t\t\t<Delete />\r\n\t\t\t</IconButton>\r\n\t\t</div>)\r\n})\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport AddItemForm from '../common/AddItemForm';\r\nimport EditableSpan from '../common/EditableSpan';\r\nimport { IconButton, Button, Checkbox } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Task } from './Task'\r\nimport { TaskStatuses, TaskType } from '../api/todolist-api';\r\nimport { FilterValuesType } from '../state/todoListReducer';\r\nimport { fetchTasksTC } from '../state/tasksReducer';\r\nimport { useDispatch } from 'react-redux';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\ntype PropsType = {\r\n\tid: string\r\n\ttitle: string\r\n\ttasks: Array<TaskType>\r\n\tentityStatus: RequestStatusType\r\n\tchangeFilter: (value: FilterValuesType, todoListId: string) => void\r\n\taddTask: (title: string, todoListID: string) => void\r\n\tremoveTask: (taskId: string, todoListID: string) => void\r\n\tchangeTaskStatus: (id: string, status: TaskStatuses, todoListID: string) => void\r\n\tchangeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n\tfilter: string\r\n\tremoveTodoList: (todoListID: string) => void\r\n\tchangeTodoListTitle: (todoListID: string, newTitle: string) => void\r\n\tdemo?: boolean\r\n\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\tconsole.log('TodoList is called')\r\n\tconst dispatch = useDispatch()\r\n\tuseEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n\tconst addTask = useCallback((title: string) => {\r\n\t\tprops.addTask(title, props.id);\r\n\t}, [props.addTask, props.id])\r\n\r\n\tconst changeTodoListTitle = useCallback((title: string) => {\r\n\t\tprops.changeTodoListTitle(props.id, title);\r\n\t}, [props.changeTodoListTitle, props.id])\r\n\r\n\tconst onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n\tconst onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n\tconst onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\r\n\r\n\tlet tasksForTodoList = props.tasks;\r\n\tif (props.filter === \"active\") {\r\n\t\ttasksForTodoList = props.tasks.filter(tl => tl.status === TaskStatuses.New)\r\n\t}\r\n\tif (props.filter === \"completed\") {\r\n\t\ttasksForTodoList = props.tasks.filter(tl => tl.status === TaskStatuses.Completed)\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<h3>\r\n\t\t\t<EditableSpan value={props.title} changeValue={changeTodoListTitle} />\r\n\t\t\t<IconButton onClick={() => { props.removeTodoList(props.id) }}\r\n\t\t\t\tdisabled={props.entityStatus === 'loading'}>\r\n\t\t\t\t<Delete />\r\n\t\t\t</IconButton>\r\n\t\t</h3>\r\n\t\t<AddItemForm addItem={addTask} />\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\ttasksForTodoList.map(task => <Task\r\n\t\t\t\t\tchangeTaskStatus={props.changeTaskStatus}\r\n\t\t\t\t\tremoveTask={props.removeTask}\r\n\t\t\t\t\ttask={task}\r\n\t\t\t\t\tchangeTaskTitle={props.changeTaskTitle}\r\n\t\t\t\t\ttodoListId={props.id}\r\n\t\t\t\t\tkey={task.id} />)\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n\t\t\t\tonClick={onAllClickHandler}\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tsize=\"small\">All</Button>\r\n\t\t\t<Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n\t\t\t\tonClick={onActiveClickHandler}\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tsize=\"small\">Active</Button>\r\n\t\t\t<Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n\t\t\t\tonClick={onCompletedClickHandler}\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tsize=\"small\">Completed</Button>\r\n\t\t</div>\r\n\t</div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport AddItemForm from '../common/AddItemForm';\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport { ChangeTodoListFilterAC, RemoveTodoListTC, TodolistDomainType, FilterValuesType, fetchTodolistsThunkTS, AddTodoListTC, ChangeToodoListTitleTC } from '../state/todoListReducer';\r\nimport { changeTaskTitleAC, addTaskTC, removeTaskTC, updateTaskStatusTC, TaskStateType } from '../state/tasksReducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../state/store';\r\nimport { TodoList } from '../components/TodoList';\r\nimport { TaskStatuses } from '../api/todolist-api';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n\tlet task =  useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\tconst isLoggetIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n\tlet dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (demo || !isLoggetIn) {\r\n            return;\r\n        }\r\n\t\tdispatch(fetchTodolistsThunkTS())\r\n\t}, [])\r\n\r\n\tconst changeFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n\t\tconst action = ChangeTodoListFilterAC(filter, todoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst removeTask = useCallback((taskId: string, todoListID: string) => {\r\n\t\t\r\n\t\tdispatch(removeTaskTC(taskId, todoListID))\r\n\t}, [dispatch])\r\n\r\n\tconst addTack = useCallback((title: string, todoListID: string) => {\r\n\t\tdispatch( addTaskTC(title, todoListID))\r\n\t}, [dispatch])\r\n\r\n\tconst changeStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\t\t\r\n\t\tdispatch(updateTaskStatusTC(taskId, status, todoListID))\r\n\t}, [dispatch])\r\n\r\n\tconst addTodoList = useCallback((title: string) => {\r\n\t\tconst action = AddTodoListTC(title)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst removeTodoList = useCallback((todoListID: string) => {\r\n\t\tconst action = RemoveTodoListTC(todoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeTaskitle = useCallback((id: string, title: string, todoListID: string) => {\r\n\t\tconst action = changeTaskTitleAC(id, title, todoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeTodoListTitle = useCallback((todoListID: string, newTitle: string) => {\r\n\t\tconst action = ChangeToodoListTitleTC(todoListID, newTitle)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tif(!isLoggetIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <div>\r\n           <Grid container style={{ padding: \"15px 0px 15px 0px\" }}>\r\n\t\t\t\t\t<AddItemForm addItem={addTodoList} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttodoLists.map(tl => {\r\n\t\t\t\t\t\t\tlet tasksForTodoList = task[tl.id];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Grid item key={tl.id}>\r\n\t\t\t\t\t\t\t\t\t<Paper style={{ padding: \"10px\" }} elevation={3}>\r\n\t\t\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\t\t\tid={tl.id}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle={tl.title}\r\n\t\t\t\t\t\t\t\t\t\t\tentityStatus={tl.entityStatus}\r\n\t\t\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeFilter={changeFilter}\r\n\t\t\t\t\t\t\t\t\t\t\taddTask={addTack}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeStatus}\r\n\t\t\t\t\t\t\t\t\t\t\tfilter={tl.filter}\r\n\t\t\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                            demo={demo}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</Grid> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../state/store';\r\nimport { loginTC } from './auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggetIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = 'Password must be more 3 sumbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if(isLoggetIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                     </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{ color: 'red' }}> {formik.errors.email} </div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{ color: 'red' }}> {formik.errors.password} </div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant=\"outlined\" color=\"primary\" >Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react'\r\nimport tenor from '../common/tenor.gif'\r\nimport s from './Error.module.css'\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={s.error}>\r\n            <div className={s.text}>404: PAGE NOT FOUND</div>\r\n            <div className={s.gif}>\r\n                <img src={tenor} alt=\"error\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography, Button, Container, LinearProgress, CircularProgress } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../state/store';\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer';\r\nimport { ErrorSnackbar } from '../common/ErrorSnackbar';\r\nimport { TodolistList } from '../components/TodolistList';\r\nimport { Redirect, Route, Switch, useHistory } from 'react-router-dom';\r\nimport { Login } from '../features/Login';\r\nimport { logoutTC } from '../features/auth-reducer';\r\nimport { Error404 } from '../components/Error404';\r\n\r\ntype PropsType = {\r\n\tdemo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\tconst status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\tconst isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\tconst isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n\tlet dispatch = useDispatch()\r\n\tlet history = useHistory()\r\n\t\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializeAppTC())\r\n\t}, [])\r\n\r\n\tconst handleClick = () => {\r\n\t\thistory.push(\"/\");\r\n\t  }\r\n\r\n\tif (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<ErrorSnackbar />\r\n\t\t\t<AppBar position=\"sticky\" color=\"inherit\" >\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<Typography variant=\"h6\" onClick={handleClick} >\r\n\t\t\t\t\t\tTodoLists\r\n    \t\t\t\t</Typography>\r\n\t\t\t\t\t{isLoggedIn && <Button color=\"primary\" onClick={() => dispatch(logoutTC())}>log out</Button>}\r\n\t\t\t\t</Toolbar>\r\n\t\t\t\t{status === 'loading' && <LinearProgress />}\r\n\t\t\t</AppBar>\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path={'/'} render={() => <TodolistList demo={demo} />} />\r\n\t\t\t\t\t<Route path={'/login'} render={() => <Login />} />\r\n\r\n\t\t\t\t\t<Route render={() => <Error404/>} />\r\n\t\t\t\t\t\r\n\t\t\t\t</Switch>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './state/store';\r\nimport { Provider } from 'react-redux';\r\nimport AppWithRedux from './app/App';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <AppWithRedux />\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// ReactDOM.render(<AppWithRedux />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__VOjyE\",\"gif\":\"Error_gif__LexYT\",\"text\":\"Error_text__1wT9E\"};","module.exports = __webpack_public_path__ + \"static/media/tenor.cf3b3451.gif\";"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","state/tasksReducer.ts","state/todoListReducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","components/ErrorSnackbar.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskPriorities","TaskStatuses","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","delete","title","post","put","taskId","model","addTaskTC","then","res","data","resultCode","task","item","addTaskAC","messages","length","handleServerAppError","catch","rootReducer","combineReducers","tasks","state","action","copyState","todoList","todoListID","filter","t","id","stateCopy","todoListId","newTasks","todoListTasks","map","todolist","todolists","forEach","tl","entityStatus","app","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","console","log","useState","setTitle","setError","addTask","trim","addItem","TextField","color","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","size","IconButton","onClick","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","changeTaskTitle","className","Checkbox","removeTask","Delete","TodoList","useDispatch","useEffect","setTasksAC","items","changeTodoListTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","removeTodoList","disabled","Button","Alert","elevation","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todoLists","ChangeTodoListFilterAC","removeTaskAC","removeTaskTC","addTack","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","updateTaskStatusTC","addTodoList","AddTodoListTC","RemoveTodoListAC","changeTaskitle","changeTaskTitleAC","newTitle","ChangeToodoListTitleAC","ChangeToodoListTitleTC","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","Grid","container","style","padding","spacing","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ecd6725.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '67477460-bd4f-44a1-875d-97f09390d59f'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    getTodo() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title})\r\n    },\r\n    updateTodo(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, { title })\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks`, { title })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`,  model )\r\n    }\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n   // происходит ли сейчас взаимодействие с сервером\r\n   status: RequestStatusType\r\n   error: string|null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n   status: 'succeeded',\r\n   error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'APP/SET-STATUS':\r\n           return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\nexport const setAppErrorAC = (error: string|null) => ({\r\n    type:'APP/SET-ERROR',\r\n    error\r\n}as const )\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC> \r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\ntype ActionsType = SetAppStatusActionType | setAppErrorActionType","import { ResponseType } from './../api/todolist-api';\r\nimport { setAppErrorAC, setAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n   if (data.messages.length) {\r\n       dispatch(setAppErrorAC(data.messages[0]))\r\n   } else {\r\n       dispatch(setAppErrorAC('Some error occurred'))\r\n   }\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(setAppErrorAC(error.message))\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorActionType | SetAppStatusActionType>","import { handleServerAppError, handleServerNetworkError } from './../utils/error-utils';\r\nimport { setAppStatusAC, setAppErrorAC } from '../app/app-reducer';\r\nimport { AppRootStateType } from './store';\r\nimport { TaskStatuses, TaskType, todolistAPI } from './../api/todolist-api';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todoListReducer';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionType = RemoveTaskActionType |\r\n    AddTaskActionType | ChangeTaskStatusType |\r\n    ChangeTaskTitleType | AddTodolistActionType |\r\n    RemoveTodolistActionType | SetTodolistsActionType | SetTasksActionType\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todoListID: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\nexport type ChangeTaskStatusType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n }\r\n \r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    let todoList;\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = { ...state };\r\n            let todoList = copyState[action.todoListID];\r\n            copyState[action.todoListID] = todoList.filter(t => t.id !== action.taskId);\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let stateCopy = { ...state }\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todoListTasks = state[action.todoListID];\r\n            state[action.todoListID] = todoListTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? { ...t, status: action.status }\r\n                    : t);\r\n            return ({ ...state })\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todoListTasks = state[action.todoListID];\r\n            state[action.todoListID] = todoListTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? { ...t, title: action.title }\r\n                    : t);\r\n            return ({ ...state })\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return { ...state, [action.todolist.id]: [] }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = { ...state };\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n         }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n         }\r\n         \r\n         \r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListID: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todoListID }\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', task }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListID: string): ChangeTaskStatusType => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, status, todoListID }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListID: string): ChangeTaskTitleType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, title, todoListID }\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n }\r\n \r\n\r\n export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n }\r\n \r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n }\r\n export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n        // те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n            \r\n            .then(() => {\r\n                const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n        }\r\n    }\r\n}\r\n \r\n\r\n\r\n","import { setAppStatusAC, RequestStatusType, setAppErrorAC } from '../app/app-reducer';\r\nimport { TodolistType, todolistAPI } from './../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => t.id === action.id ? { ...t, title: action.title } : t)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => t.id === action.id ? { ...t, filter: action.filter } : t)\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        }\r\n        case 'CHANGE-TODOLIST-ENTITI-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = RemoveTodolistActionType |\r\n    AddTodolistActionType |\r\n    ReturnType<typeof ChangeToodoListTitleAC> |\r\n    ReturnType<typeof ChangeTodoListFilterAC> |\r\n    ReturnType<typeof ChangeTodoListFilterAC> |\r\n    SetTodolistsActionType |\r\n    ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodoListAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodoListAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport const RemoveTodoListAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\n\r\nexport const AddTodoListAC = (todolist: TodolistType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n} as const)\r\nexport const ChangeToodoListTitleAC = (todoListID: string, newTitle: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: todoListID,\r\n    title: newTitle\r\n} as const)\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, todoListID: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: todoListID,\r\n    filter: filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType,) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITI-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\nexport const fetchTodolistsThunkTS = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTodo()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const RemoveTodoListTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistAPI.deleteTodo(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(RemoveTodoListAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const AddTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.createTodo(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(AddTodoListAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const ChangeToodoListTitleTC = (todoListID: string, newTitle: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTodo(todoListID, newTitle)\r\n            .then((res) => {\r\n                dispatch(ChangeToodoListTitleAC(todoListID, newTitle))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n","import { appReducer } from '../app/app-reducer';\r\nimport {tasksReducer} from './tasksReducer';\r\nimport {todoListReducer} from './todoListReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todoListReducer,\r\n   app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport {TextField, IconButton} from '@material-ui/core';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\n\r\ntype AddItemFormPropsType = {\r\n\taddItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\tconsole.log('AddItemForm is called')\r\n\tlet [title, setTitle] = useState<string>(\"\");\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t};\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif(error !== null){\r\n\t\t\tsetError(null)\r\n\t\t}\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\taddTask();\r\n\t\t}\r\n\t};\r\n\r\n\tconst addTask = () => {\r\n\t\tif (title.trim() !== \"\") {\r\n\t\t\tprops.addItem(title.trim());\r\n\t\t\tsetTitle(\"\")\r\n\t\t} else {\r\n\t\t\tsetError(\"error\")\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\tcolor=\"primary\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tvalue={title}\r\n\t\t\t\tonChange={onChangeHandler}\r\n\t\t\t\tonKeyPress={onKeyPressHandler}\r\n\t\t\t\terror={!!error}\r\n\t\t\t\thelperText={error}\r\n\t\t\t\tlabel=\"Please enter text\"\r\n\t\t\t\tsize=\"small\"\r\n\t\t\t/>\r\n\t\t\t<IconButton color=\"inherit\" size=\"medium\" onClick={addTask}>\r\n\t\t\t\t<PostAddIcon/>\r\n\t\t\t</IconButton>\r\n\t\t</div>\r\n\t)\r\n});\r\n\r\nexport default AddItemForm;\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n\tvalue: string\r\n\tchangeValue: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\tconsole.log('wdefr')\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [title, setTitle] = useState(props.value)\r\n\r\n\tconst onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst activatedEditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t}\r\n\r\n\tconst deActivatedEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tif(title){\r\n\t\t\tprops.changeValue(title)\r\n\t\t}\r\n\t}\r\n\r\n\treturn editMode\r\n\t\t? <TextField variant=\"standard\" value={title} onBlur={deActivatedEditMode} autoFocus={true} onChange={onChangeTitle} />\r\n\t\t: <span onDoubleClick={activatedEditMode}> {props.value} </span>\r\n});\r\n\r\nexport default EditableSpan;\r\n","import { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useCallback } from 'react';\r\nimport { TaskStatuses, TaskType } from './api/todolist-api';\r\nimport EditableSpan from './EditableSpan';\r\n\r\ntype TaskPropsType = {\r\n\tremoveTask: (taskId: string, todoListID: string) => void\r\n\tchangeTaskStatus: (id: string, status: TaskStatuses, todoListID: string) => void\r\n\tchangeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n\ttask: TaskType\r\n\ttodoListId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\tconst removeTask = () => { props.removeTask(props.task.id, props.todoListId) }\r\n\tconst onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n\t}, [props.task.id, props.todoListId]);\r\n\t\r\n\tconst changeTaskTitle = useCallback((title: string) => {\r\n\t\tprops.changeTaskTitle(props.task.id, title, props.todoListId)\r\n\t}, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\treturn (\r\n\t\t<div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\t\t\t<Checkbox color=\"primary\" checked={props.task.status === TaskStatuses.Completed} onChange={onChangeHandler} />\r\n\t\t\t<EditableSpan value={props.task.title} changeValue={changeTaskTitle} />\r\n\t\t\t<IconButton onClick={removeTask} size=\"small\">\r\n\t\t\t\t<Delete />\r\n\t\t\t</IconButton>\r\n\t\t</div>)\r\n})\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport { IconButton, Button, Checkbox } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Task } from './Task'\r\nimport { TaskStatuses, TaskType } from './api/todolist-api';\r\nimport { FilterValuesType } from './state/todoListReducer';\r\nimport { fetchTasksTC } from './state/tasksReducer';\r\nimport { useDispatch } from 'react-redux';\r\nimport { RequestStatusType } from './app/app-reducer';\r\n\r\ntype PropsType = {\r\n\tid: string\r\n\ttitle: string\r\n\ttasks: Array<TaskType>\r\n\tentityStatus: RequestStatusType\r\n\tchangeFilter: (value: FilterValuesType, todoListId: string) => void\r\n\taddTask: (title: string, todoListID: string) => void\r\n\tremoveTask: (taskId: string, todoListID: string) => void\r\n\tchangeTaskStatus: (id: string, status: TaskStatuses, todoListID: string) => void\r\n\tchangeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n\tfilter: string\r\n\tremoveTodoList: (todoListID: string) => void\r\n\tchangeTodoListTitle: (todoListID: string, newTitle: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n\tconsole.log('TodoList is called')\r\n\tconst dispatch = useDispatch()\r\n\tuseEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n\tconst addTask = useCallback((title: string) => {\r\n\t\tprops.addTask(title, props.id);\r\n\t}, [props.addTask, props.id])\r\n\r\n\tconst changeTodoListTitle = useCallback((title: string) => {\r\n\t\tprops.changeTodoListTitle(props.id, title);\r\n\t}, [props.changeTodoListTitle, props.id])\r\n\r\n\tconst onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n\tconst onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n\tconst onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\r\n\r\n\tlet tasksForTodoList = props.tasks;\r\n\tif (props.filter === \"active\") {\r\n\t\ttasksForTodoList = props.tasks.filter(tl => tl.status === TaskStatuses.New)\r\n\t}\r\n\tif (props.filter === \"completed\") {\r\n\t\ttasksForTodoList = props.tasks.filter(tl => tl.status === TaskStatuses.Completed)\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<h3>\r\n\t\t\t<EditableSpan value={props.title} changeValue={changeTodoListTitle} />\r\n\t\t\t<IconButton onClick={() => { props.removeTodoList(props.id) }}\r\n\t\t\t\tdisabled={props.entityStatus === 'loading'}>\r\n\t\t\t\t<Delete />\r\n\t\t\t</IconButton>\r\n\t\t</h3>\r\n\t\t<AddItemForm addItem={addTask} />\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\ttasksForTodoList.map(task => <Task\r\n\t\t\t\t\tchangeTaskStatus={props.changeTaskStatus}\r\n\t\t\t\t\tremoveTask={props.removeTask}\r\n\t\t\t\t\ttask={task}\r\n\t\t\t\t\tchangeTaskTitle={props.changeTaskTitle}\r\n\t\t\t\t\ttodoListId={props.id}\r\n\t\t\t\t\tkey={task.id} />)\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n\t\t\t\tonClick={onAllClickHandler}\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tsize=\"small\">All</Button>\r\n\t\t\t<Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n\t\t\t\tonClick={onActiveClickHandler}\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tsize=\"small\">Active</Button>\r\n\t\t\t<Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n\t\t\t\tonClick={onCompletedClickHandler}\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tsize=\"small\">Completed</Button>\r\n\t\t</div>\r\n\t</div>\r\n})\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../state/store'\r\nimport { setAppErrorAC } from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch =  useDispatch()\r\n\r\n   const error = useSelector<AppRootStateType, string|null>((state) => state.app.error)\r\n\r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n       if (reason === 'clickaway') {\r\n           return\r\n       }\r\n       dispatch(setAppErrorAC(null))\r\n       \r\n   }\r\n\r\n   return (\r\n       <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n           <Alert onClose={handleClose} severity=\"error\">\r\n               {error}\r\n           </Alert>\r\n       </Snackbar>\r\n\r\n   )\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport './App.css';\r\nimport AddItemForm from './AddItemForm';\r\nimport { AppBar, Toolbar, IconButton, Typography, Button, Container, Grid, Paper, LinearProgress } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { AddTodoListAC, ChangeTodoListFilterAC, ChangeToodoListTitleAC, RemoveTodoListTC, setTodolistsAC, TodolistDomainType, FilterValuesType, fetchTodolistsThunkTS, AddTodoListTC, ChangeToodoListTitleTC } from './state/todoListReducer';\r\nimport { addTaskAC, changeTaskStatusAC, removeTaskAC, changeTaskTitleAC, addTaskTC, removeTaskTC, updateTaskStatusTC } from './state/tasksReducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { TodoList } from './TodoList';\r\nimport { TaskStatuses, TaskType, todolistAPI } from './api/todolist-api';\r\nimport { RequestStatusType } from './app/app-reducer';\r\nimport { ErrorSnackbar } from './components/ErrorSnackbar';\r\n\r\n\r\nexport type TaskStateType = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n\tconsole.log('App is called')\r\n\tconst todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n\tlet task =  useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\tconst status = useSelector<AppRootStateType , RequestStatusType>((state) => state.app.status)\r\n\tlet dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetchTodolistsThunkTS())\r\n\t}, [])\r\n\r\n\tconst changeFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n\t\tconst action = ChangeTodoListFilterAC(filter, todoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst removeTask = useCallback((taskId: string, todoListID: string) => {\r\n\t\t\r\n\t\tdispatch(removeTaskTC(taskId, todoListID))\r\n\t}, [dispatch])\r\n\r\n\tconst addTack = useCallback((title: string, todoListID: string) => {\r\n\t\tdispatch( addTaskTC(title, todoListID))\r\n\t}, [dispatch])\r\n\r\n\tconst changeStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\t\t\r\n\t\tdispatch(updateTaskStatusTC(taskId, status, todoListID))\r\n\t}, [dispatch])\r\n\r\n\tconst addTodoList = useCallback((title: string) => {\r\n\t\tconst action = AddTodoListTC(title)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst removeTodoList = useCallback((todoListID: string) => {\r\n\t\tconst action = RemoveTodoListTC(todoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeTaskitle = useCallback((id: string, title: string, todoListID: string) => {\r\n\t\tconst action = changeTaskTitleAC(id, title, todoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeTodoListTitle = useCallback((todoListID: string, newTitle: string) => {\r\n\t\tconst action = ChangeToodoListTitleTC(todoListID, newTitle)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<ErrorSnackbar/>\r\n\t\t\t<AppBar position=\"sticky\" color=\"inherit\" >\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<IconButton edge=\"start\" color=\"primary\" aria-label=\"menu\">\r\n\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\tTodoLists\r\n    \t\t\t\t</Typography>\r\n\t\t\t\t\t<Button color=\"primary\">Login</Button>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t\t{status === 'loading' && <LinearProgress />}\r\n\t\t\t</AppBar>\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<Grid container style={{ padding: \"15px 0px 15px 0px\" }}>\r\n\t\t\t\t\t<AddItemForm addItem={addTodoList} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttodoLists.map(tl => {\r\n\t\t\t\t\t\t\tlet tasksForTodoList = task[tl.id];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Grid item key={tl.id}>\r\n\t\t\t\t\t\t\t\t\t<Paper style={{ padding: \"10px\" }} elevation={3}>\r\n\t\t\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\t\t\tid={tl.id}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle={tl.title}\r\n\t\t\t\t\t\t\t\t\t\t\tentityStatus={tl.entityStatus}\r\n\t\t\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeFilter={changeFilter}\r\n\t\t\t\t\t\t\t\t\t\t\taddTask={addTack}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeStatus}\r\n\t\t\t\t\t\t\t\t\t\t\tfilter={tl.filter}\r\n\t\t\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskitle}\r\n\t\t\t\t\t\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\nimport AppWithRedux from './AppWithRedux';\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n       <AppWithRedux />\r\n   </Provider>, document.getElementById('root'));\r\n\r\n// ReactDOM.render(<AppWithRedux />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}